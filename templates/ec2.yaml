---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Ubuntu Ec2 Instances with Java, Docker and Jenkins installed for Falcon CI Lab'
Parameters:
  PrimaryInstanceName:
    Type: String
    Description: 'Name of the Jenkins Primary EC2 Instance'
    Default: 'falconCI-dockerJenkins-primary'
  AgentInstanceName:
    Type: String
    Description: 'Name of the Jenkins Agent EC2 Instance'
    Default: 'falconCI-dockerJenkins-agent'
  BastionInstanceName:
    Type: String
    Description: 'Name of the Bastion EC2 Instance'
    Default: 'windows-bastion'
  KeyName:
    Type: String
    Description: 'Name of the SSH Key Pair'
    Default: 'cs-key'
  InstanceType:
    Type: String
    Description: 'Instance Type'
    Default: 't2.small'
  InstanceProfile:
    Type: String
  UbuntuAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: 'Get latest Ubuntu AMI'
    Default: /aws/service/canonical/ubuntu/server/focal/stable/current/amd64/hvm/ebs-gp2/ami-id
  WindowsAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: 'Get latest Windows Server AMI'
    Default: /aws/service/ami-windows-latest/Windows_Server-2022-English-Full-Base
  VpcId:
    Type: String
    Description: VPC ID from VPCStack
  PublicSubnet1:
    Type: String
    Description: Public Subnet ID from VPCStack
  PublicSubnet2:
    Type: String
    Description: Public Subnet ID from VPCStack
  PrivateSubnet1:
    Type: String
    Description: Private Subnet ID from VPCStack
  PrivateSubnet2:
    Type: String
    Description: Private Subnet ID from VPCStack
Resources:
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref JenkinsPrimary
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref JenkinsAgent
  JenkinsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow connections from specified CIDR ranges
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 10.0.0.0/16
  InboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: JenkinsSG
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId:
        Fn::GetAtt:
          - JenkinsSG
          - GroupId
      GroupId:
        Fn::GetAtt:
          - JenkinsSG
          - GroupId
  JenkinsPrimary:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref UbuntuAMI
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
      - !GetAtt JenkinsSG.GroupId
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 30
      Tags: 
        - Key: 'Name'
          Value: !Ref PrimaryInstanceName
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            #Log UserData Actions
            printf "\nLogging all output to /var/log/cloud-init-output.log\n"
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            #Install AWS CLI
            printf "\nInstall AWS CLI\n"
            apt-get update
            apt-get install awscli -y
            aws --version
            #Get cloud-utils tool
            printf "\nInstall cloud-utils\n"
            apt-get -y install cloud-utils
            #Get and Set Region
            az=$(ec2metadata --availability-zone)
            region=$"`echo \"$az\" | sed 's/[a-z]$//'`"
            aws configure set region $region
            #Install Java JRE and JDK
            printf "\nInstall Default Java JRE and JDK\n"
            apt update
            apt install default-jre -y
            apt install default-jdk -y
            printf "\nVerify versions of Java JRE and JDK\n"
            java -version
            javac -version
            #Prep for CodeCommit Access
            apt install git -y
            curl -O https://bootstrap.pypa.io/get-pip.py
            python3 get-pip.py --user
            pip install git-remote-codecommit
            #Install Docker
            printf "\nInstall Docker prerequisites, Docker GPG key\n"
            apt-get install \
                ca-certificates \
                curl \
                gnupg \
                lsb-release
            mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update
            printf "\nInstall docker-ce, docker-ce-cli, containerd.io and docker-compose-plugin\n"
            apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
            printf "\nVerify Docker installation\n"
            docker run hello-world
            #printf "\nPull images from DockerHub\n"
            #docker pull vulnerables/web-dvwa
            #docker pull imageName
            #Install Jenkins
            printf "\nInstall Jenkins\n"
            wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | apt-key add -
            sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
            apt update
            apt install jenkins -y
            printf "\n## Jenkins Admin Password ##\n"
            cat /var/lib/jenkins/secrets/initialAdminPassword
            #Give Jenkins User Docker Access
            printf "\nAdd ubuntu and jenkins users to Docker group\n"
            usermod -aG docker ubuntu
            usermod -aG docker jenkins
            newgrp docker
            chmod 777 /var/run/docker.sock
            #Write Jenkins URLs to Parameter Store
            printf "\nWrite Jenkins URLs to Parameter Store\n"
            localIp=$(ec2metadata --local-ipv4)
            aws ssm put-parameter --name "Jenkins-URL" --type "String" --value "$localIp:8080"
            #Write Jenkins PW to secretManager
            printf "\nWrite Jenkins Admin password to Secrets Manager\n"
            now=$(date +'%Y%m%d%H%M%S')
            secretName=jenkins-$now
            secretValue=$(cat /var/lib/jenkins/secrets/initialAdminPassword)
            aws secretsmanager create-secret --name $secretName --secret-string $secretValue --description "Initial Jenkins Admin Password"
  JenkinsAgent:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref UbuntuAMI
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
      - !GetAtt JenkinsSG.GroupId
      BlockDeviceMappings:
      -
        DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 30
      Tags: 
        - Key: 'Name'
          Value: !Ref AgentInstanceName
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            #Log UserData Actions
            printf "\nLogging all output to /var/log/cloud-init-output.log\n"
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            #Install AWS CLI
            printf "\nInstall AWS CLI\n"
            apt-get update
            apt-get install awscli -y
            aws --version
            #Get cloud-utils tool
            printf "\nInstall cloud-utils\n"
            apt-get -y install cloud-utils
            #Get and Set Region
            az=$(ec2metadata --availability-zone)
            region=$"`echo \"$az\" | sed 's/[a-z]$//'`"
            aws configure set region $region
            #Install Java JRE and JDK
            printf "\nInstall Default Java JRE and JDK\n"
            apt update
            apt install default-jre -y
            apt install default-jdk -y
            printf "\nVerify versions of Java JRE and JDK\n"
            java -version
            javac -version
            #Prep for CodeCommit Access
            apt install git -y
            curl -O https://bootstrap.pypa.io/get-pip.py
            python3 get-pip.py --user
            pip install git-remote-codecommit
            #Install Docker
            printf "\nInstall Docker prerequisites, Docker GPG key\n"
            apt-get install \
                ca-certificates \
                curl \
                gnupg \
                lsb-release
            mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update
            printf "\nInstall docker-ce, docker-ce-cli, containerd.io and docker-compose-plugin\n"
            apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
            printf "\nVerify Docker installation\n"
            docker run hello-world
            #Give Ubuntu User Docker Access
            printf "\nAdd ubuntu user to Docker group\n"
            usermod -aG docker ubuntu
            newgrp docker
            chmod 777 /var/run/docker.sock
            #Create Jenkins root dir
            mkdir /var/jenkins
            chmod -R 777 /var/jenkins
            #Write Private IP to Parameter Store
            printf "\nWrite Private IP to Parameter Store\n"
            localIp=$(ec2metadata --local-ipv4)
            aws ssm put-parameter --name "Jenkins-Agent-Ip" --type "String" --value $localIp
  WindowsBastion:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref WindowsAMI
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
      - !GetAtt JenkinsSG.GroupId
      Tags: 
        - Key: 'Name'
          Value: !Ref BastionInstanceName
      UserData:
        Fn::Base64: 
          !Sub |
            <powershell>
            $LocalTempDir = $env:TEMP; $ChromeInstaller = "ChromeInstaller.exe"; (new-object    System.Net.WebClient).DownloadFile('http://dl.google.com/chrome/install/375.126/chrome_installer.exe', "$LocalTempDir\$ChromeInstaller"); & "$LocalTempDir\$ChromeInstaller" /silent /install; $Process2Monitor =  "ChromeInstaller"; Do { $ProcessesFound = Get-Process | ?{$Process2Monitor -contains $_.Name} | Select-Object -ExpandProperty Name; If ($ProcessesFound) { "Still running: $($ProcessesFound -join ', ')" | Write-Host; Start-Sleep -Seconds 2 } else { rm "$LocalTempDir\$ChromeInstaller" -ErrorAction SilentlyContinue -Verbose } } Until (!$ProcessesFound)
            </powershell>
